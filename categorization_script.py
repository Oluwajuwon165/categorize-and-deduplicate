#!/usr/bin/python3

# Define a list of words to exclude from categorization
exclude_words = [
        "And", "In", "Is", "Price", "To", "Buy", "Where", "In", "For",
        "Port Harcourt", "Lagos", "Near Me", "Me", "Near",
        "Harcourt", "Port", "Ikeja", "Lekki", "Online", "Abuja", 
        "Nigeria", "Cheap", "Shop", "A", "How", "Much", "Sale",
        "Rent", "Used", "An", "Car", "Uk", "Of", "With", "Does",
        "Cost", "It", "Usa", "Best", "New","At", "On","Get", "Mini",
        "Like", "Without","Their", "Today", "Place", "Replace", "The",
        "Black", "What","nigeria", "price", "for", "is", "much",
        "under", "how", "best", "of", "and", "plus", "a", "with",
        "core", "in","free", "list", "to", "Write", "Essay", "Letter",
        "About", "Sample", "Card", "Under"
        ]

# Define a function to read a file and return a list of lines
def read_file(filename, encoding='utf-8'):
    lines = []
    with open(filename, "r", encoding='utf-8', errors='ignore') as f:
        for line in f:
            line = line.strip() # Remove whitespace
            if line: # Ignore empty lines
                lines.append(line)
    return lines

# Define a function to write a list of lines to a file
def write_file(filename, lines):
    with open(filename, "w", encoding='utf-8') as f:
        for line in lines:
            f.write(line + "\n")

# Define a function to count the occurrences of each word in a list of lines
def count_words(lines):
    counts = {}
    for line in lines:
        words = line.split() # Split the line into words
        for word in words:
            if word.lower() not in exclude_words and not word.isdigit(): # Ignore excluded words and numbers
                counts[word] = counts.get(word, 0) + 1 # Increment the count of the word
    return counts

# Define a function to group the lines by pairs of words that occur at least five times in the document
def group_lines(lines, counts):
    groups = {}
    for line in lines:
        words = line.split()  # Split the line into words
        # Filter out excluded words and convert to a list of unique words
        unique_words = list(set(word for word in words if word.lower() not in exclude_words))
        for i, word1 in enumerate(unique_words):
            for word2 in unique_words[i+1:]:
                word_pair = (word1, word2) if word1 < word2 else (word2, word1)  # Ensure consistent order for the pair
                if counts.get(word_pair[0], 0) >= 5 and counts.get(word_pair[1], 0) >= 5:  # Check if both words occur at least five times
                    word_pair_key = ' '.join(word_pair)  # Convert the word pair tuple into a string representation
                    if word_pair_key not in groups:  # Create a new group for the word pair if it does not exist
                        groups[word_pair_key] = []
                    # If the line contains both words in the pair, add it to the group if it is not already there
                    if all(word in line for word in word_pair) and line not in groups[word_pair_key]:
                        groups[word_pair_key].append(line)
    return groups

# Define a function to sort the groups by the number of occurrences of the word
def sort_groups(groups, counts):
    sorted_groups = []
    for word_pair_key, lines in groups.items():  # Iterate over the word pair keys
        word_pair = tuple(word_pair_key.split())  # Convert the string key back to a tuple
        count = sum(counts[word] for word in word_pair)  # Calculate the total count for the word pair
        sorted_groups.append((word_pair, lines, count))  # Store the word pair, the lines, and the count as a tuple
    sorted_groups.sort(key=lambda x: x[2])  # Sort the tuples by the count in ascending order
    return sorted_groups

# Define a function to format the groups into a list of lines with two blank lines between each group
def format_groups(groups):
    formatted_lines = []
    for word_pair, lines, count in groups:
        if len(lines) >= 5:  # Check if the category has at least five lines
            formatted_lines.append(f"{word_pair} ({count} occurrences):")  # Add category header
            formatted_lines.extend(lines)  # Add lines in the category
            formatted_lines.append("")  # Add a blank line after each category
            formatted_lines.append("")  # Add another blank line
    return formatted_lines

# Define the original file and the new file using the paths provided by the user
original_file = "full path to original file.txt" #This is the path where the original file is saved
new_file = "Path to save output_1.txt" #This is the path where the file 
#generated by the program is saved after categorization.

# Read the original file and get the list of lines
original_lines = read_file(original_file)

# Count the occurrences of each word in the original lines
word_counts = count_words(original_lines)

# Group the original lines by words that occur at least five times
line_groups = group_lines(original_lines, word_counts)

# Sort the groups by the number of occurrences of the word
sorted_groups = sort_groups(line_groups, word_counts)

# Format the groups into a list of lines with two blank lines between each group
new_lines = format_groups(sorted_groups)

# Write the new lines to the new file
write_file(new_file, new_lines)
